# Generated by Django 3.2.5 on 2022-03-16 03:45

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import rfis.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('can_notify', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GmailCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credentials', models.JSONField(default=None, null=True)),
            ],
            options={
                'verbose_name_plural': 'Gmail Credentials',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateTimeField()),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='ThreadType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ThreadTypeAltName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('thread_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thread_type', to='rfis.threadtype')),
            ],
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmail_thread_id', models.CharField(max_length=200, unique=True)),
                ('subject', models.CharField(max_length=400)),
                ('time_received', models.DateTimeField()),
                ('due_date', models.DateTimeField()),
                ('thread_status', models.CharField(choices=[('OPEN', 'Open'), ('CLOSED', 'Closed')], default='OPEN', max_length=15)),
                ('original_initiator', models.CharField(max_length=300)),
                ('accepted_answer', models.TextField(blank=True, default='')),
                ('job_id', models.ForeignKey(on_delete=models.SET(rfis.models.Job.get_job_sentinel_id), to='rfis.job')),
                ('message_thread_initiator', models.ForeignKey(on_delete=models.SET(rfis.models.MyUser.get_user_sentinel_id), to=settings.AUTH_USER_MODEL)),
                ('thread_type', models.ForeignKey(default=rfis.models.ThreadType.get_message_type_sentinel_id, on_delete=models.SET(rfis.models.ThreadType.get_message_type_sentinel_id), to='rfis.threadtype')),
            ],
            options={
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='MessageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('owner', models.ForeignKey(on_delete=models.SET(rfis.models.MyUser.get_user_sentinel_id), to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.CharField(max_length=200, unique=True)),
                ('subject', models.CharField(max_length=400)),
                ('body', models.TextField(default='')),
                ('debug_unparsed_body', models.TextField(default='')),
                ('fromm', models.CharField(max_length=100)),
                ('to', models.CharField(max_length=200)),
                ('cc', models.CharField(max_length=1000)),
                ('time_received', models.DateTimeField()),
                ('vector_body_column', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('message_thread_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rfis.thread')),
            ],
            options={
                'ordering': ['time_received'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gmail_attachment_id', models.CharField(default='Unknown', max_length=1000)),
                ('filename', models.CharField(max_length=100)),
                ('time_received', models.DateTimeField()),
                ('message_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rfis.message')),
            ],
            options={
                'ordering': ['time_received'],
            },
        ),
        migrations.AddIndex(
            model_name='message',
            index=django.contrib.postgres.indexes.GinIndex(fields=['vector_body_column'], name='rfis_messag_vector__c26d26_gin'),
        ),
    ]
